{
  "name": "Password reset request",
  "nodes": [
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"response\": \"Done\",\n  \"code\": 200\n}",
        "options": {}
      },
      "id": "ac7010ea-1c83-440a-a785-2ddfac7d1c42",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2140,
        500
      ]
    },
    {
      "parameters": {
        "url": "http://parse-server:1337/parse/classes/_User",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Parse-Application-Id",
              "value": "myAppId"
            },
            {
              "name": "X-Parse-Master-Key",
              "value": "myMasterKey"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"where\": {\n    \"username\": \"{{ $json.body.email }}\"\n  }\n}\n",
        "options": {}
      },
      "id": "76ebdcf4-f837-4234-bb0f-f46578dc33f6",
      "name": "Check email exists",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        520
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const users = items[0].json.results;\n\nconst user = users[0];\nuser.passwordResetToken = Math.random().toString(26).slice(2);\nuser.passwordResetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n\nreturn [{\n  json: {\n    userId: user.objectId,\n    token: user.passwordResetToken,\n    email: user.username,\n    expiry: user.passwordResetTokenExpires,\n  }\n}];\n"
      },
      "id": "9d8fcc0f-3f47-4b65-bc1f-4a0acf3e2ea2",
      "name": "Generate a new token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        520
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the rootDomain, token, and email from previous nodes\nconst rootDomain = $('Webhook').item.json.body[\"rootDomain\"];\nconst token = $json[\"token\"];\nconst email = $('Webhook').item.json.body[\"email\"];\n\n// Construct the full URL without encoding the rest of the symbols\nlet resetLink = `${rootDomain}/reset-password?token=${token}&email=${email}`;\n\n// Encode only the '=' symbol in the URL\n// resetLink = resetLink.replace(/=/g, '%3D');\n\nreturn {\n  json: {\n    link: resetLink\n  }\n};\n"
      },
      "id": "cd153784-1b0e-4b4e-89ef-f8ee920a4eab",
      "name": "URL encode params",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        520
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=http://parse-server:1337/parse/classes/_User/{{ $('Generate a new token').item.json['userId'] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Parse-Application-Id",
              "value": "myAppId"
            },
            {
              "name": "X-Parse-Master-Key",
              "value": "myMasterKey"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"passwordResetToken\": \"{{ $('Generate a new token').item.json['token'] }}\",\n  \"passwordResetTokenExpires\": {\n    \"__type\": \"Date\",\n    \"iso\": \"{{ new Date($('Generate a new token').item.json['expiry']).toISOString() }}\"\n  }\n}",
        "options": {}
      },
      "id": "2b74570e-a93b-4bae-8885-d95e41430b3d",
      "name": "Update user token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        520
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"Email not found\"\n}",
        "options": {}
      },
      "id": "5adefeb3-0de0-478c-965e-dacf16dae6d6",
      "name": "User not found",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1140,
        760
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.brevo.com/v3/smtp/email",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "sendInBlueApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"templateId\": 12, \n  \"params\": {\n    \"link\": \"{{ $('URL encode params').item.json.link }}\"\n  },\n  \"to\": [\n    {\n      \"email\": \"{{ $('Webhook').item.json.body.email }}\"\n    }\n  ],\n  \"sender\": {\n    \"email\": \"contact@learn-noodl.com\",\n    \"name\": \"Learn Noodl\"\n  }\n}",
        "options": {}
      },
      "id": "d78b030d-4a1e-44cc-b408-fee86c81b0c3",
      "name": "Send Brevo template",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1900,
        520
      ],
      "credentials": {
        "sendInBlueApi": {
          "id": "xh4jQWUZTFrUi8DN",
          "name": "Brevo account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.error }}\"\n}",
        "options": {}
      },
      "id": "0c8ad035-4a23-45b3-9b5d-382f0d43f83f",
      "name": "Server query error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        860,
        740
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.error }}\"\n}",
        "options": {}
      },
      "id": "73848556-da66-4ab9-8c4a-fc0ce9cf9e96",
      "name": "Server write error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1880,
        760
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8832c485-64c1-4b6f-a7ad-48b7413d6523",
              "leftValue": "={{ $json.results }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7302a38d-ae7c-46dd-94be-722aa5b21aac",
      "name": "User exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        980,
        520
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.error.message }}\"\n}",
        "options": {}
      },
      "id": "22f39115-f06a-4c91-8634-075f1c364a69",
      "name": "Brevo email error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2120,
        760
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fe59eb69-eccf-42f1-90b3-4ffc0c875a5e",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "bf4ae08d-e761-4e94-90fd-d6235fd80cc9",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        480,
        520
      ],
      "webhookId": "fe59eb69-eccf-42f1-90b3-4ffc0c875a5e"
    }
  ],
  "pinData": {},
  "connections": {
    "Check email exists": {
      "main": [
        [
          {
            "node": "User exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Server query error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate a new token": {
      "main": [
        [
          {
            "node": "URL encode params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "URL encode params": {
      "main": [
        [
          {
            "node": "Update user token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update user token": {
      "main": [
        [
          {
            "node": "Send Brevo template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Server write error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Brevo template": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Brevo email error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User exists": {
      "main": [
        [
          {
            "node": "Generate a new token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User not found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Check email exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "64203591-c3be-466f-ac63-7f38adce7cd5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "68dfb2fbf54361e6c1ec1c86541388b684d7ef1a05f62a7abd541d34474dfe45"
  },
  "id": "cB9kiDaqxZ3dQZ7s",
  "tags": []
}