{
  "name": "Password reset check",
  "nodes": [
    {
      "parameters": {
        "url": "http://parse-server:1337/parse/classes/_User",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Parse-Application-Id",
              "value": "myAppId"
            },
            {
              "name": "X-Parse-Master-Key",
              "value": "myMasterKey"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"where\": {\n    \"username\": \"{{ $json.body.email }}\"\n  }\n}\n",
        "options": {}
      },
      "id": "92c4e7fb-d873-4d21-bc7c-fed050ae2cc0",
      "name": "Check email exists",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        760,
        240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "ebfd5d50-3154-4e58-b6b0-30ddbd5945a4",
              "leftValue": "={{ $json.results }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0c23c93e-af71-41de-b9ce-1cad3390f9cf",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        1000,
        220
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.error.message }}\",\n  \"code\": 500\n}",
        "options": {}
      },
      "id": "202f2c63-8421-41b1-ac9c-dd575a9d4f12",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        960,
        420
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.error }}\",\n  \"code\": 500\n}",
        "options": {}
      },
      "id": "9eed72b1-f447-46a5-adc1-0ff557a72a34",
      "name": "Token error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1540,
        420
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"response\": \"Email not found\",\n  \"code\": 500\n}",
        "options": {}
      },
      "id": "52f6b430-e9fb-4ac5-80cc-d725fdb554b2",
      "name": "Email not found",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1280,
        420
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=http://parse-server:1337/parse/classes/_User/{{ $('Check token is valid').all()[0].json.userId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Parse-Application-Id",
              "value": "myAppId"
            },
            {
              "name": "X-Parse-Master-Key",
              "value": "myMasterKey"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"password\": {{ $('Webhook').item.json.body.password }}\n  \"passwordResetToken\": null,\n  \"passwordResetTokenExpires\": null\n}\n",
        "options": {}
      },
      "id": "f360ae3c-8350-4b9d-bfae-09dbce89d0e8",
      "name": "Update user token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1480,
        220
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9cfe2d31-43cd-4a50-ac14-8d84431cf34c",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "ce3659a4-e103-4c6c-9ac5-d60fd1f41a3c",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        540,
        240
      ],
      "webhookId": "9cfe2d31-43cd-4a50-ac14-8d84431cf34c"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"response\": \"Done\",\n  \"code\": 200\n}",
        "options": {}
      },
      "id": "5bb2ef5e-c3b9-4061-8206-5bc088f9b42c",
      "name": "Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1700,
        220
      ]
    },
    {
      "parameters": {
        "jsCode": "const user = $('Check email exists').item.json.results[0];\nconst token = $('Webhook').item.json.body['token'];\nconst email = $('Webhook').item.json.body['email'];\nconst newPassword = $('Webhook').item.json.body['newPassword'];\n\nconsole.log(token);\n\nif (user.passwordResetToken === token && \n    (new Date(user.passwordResetTokenExpires.iso)).getTime() > Date.now()) {\n    // Valid token and not expired, update the password\n    return [{\n        json: {\n            userId: user.objectId,\n            newPassword,\n            passwordResetToken: null,\n            passwordResetTokenExpires: null\n        }\n    }];\n} else {\n    throw new Error('Invalid token or token expired.');\n}\n"
      },
      "id": "64b8cf79-e38a-4738-a1d3-9eed10722491",
      "name": "Check token is valid",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        220
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.error.message }}\",\n  \"code\": 500\n}",
        "options": {}
      },
      "id": "35c20216-a0e3-4c46-aae8-fcf581f4e0f8",
      "name": "Update user token failed",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1800,
        420
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Check email exists": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Check token is valid",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Email not found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update user token": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update user token failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Check email exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check token is valid": {
      "main": [
        [
          {
            "node": "Update user token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Token error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e13b7cab-053e-4a9e-ab66-78e56449f0e9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "68dfb2fbf54361e6c1ec1c86541388b684d7ef1a05f62a7abd541d34474dfe45"
  },
  "id": "BJFHmkbc0kzbW1td",
  "tags": []
}